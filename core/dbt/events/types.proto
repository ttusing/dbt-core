syntax = "proto3";

package proto_types;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// Common event info
message EventInfo {
    string name = 1;
    string code = 2;
    string msg = 3;
    string level = 4;
    string invocation_id = 5;
    int32 pid = 6;
    string thread = 7;
    google.protobuf.Timestamp ts = 8;
    map<string, string> extra = 9;
    string category = 10;
}

// TimingInfo
message TimingInfoMsg {
    string name = 1;
    google.protobuf.Timestamp started_at = 2;
    google.protobuf.Timestamp completed_at = 3;
}

// NodeInfo
message NodeInfo {
    string node_path = 1;
    string node_name = 2;
    string unique_id = 3;
    string resource_type = 4;
    string materialized = 5;
    string node_status = 6;
    string node_started_at = 7;
    string node_finished_at = 8;
    google.protobuf.Struct meta = 9;
}

// RunResult
message RunResultMsg {
    string status = 1;
    string message = 2;
    repeated TimingInfoMsg timing_info = 3;
    string thread = 4;
    float execution_time = 5;
    google.protobuf.Struct adapter_response = 6;
    int32 num_failures = 7;
}

// ReferenceKey
message ReferenceKeyMsg {
    string database = 1;
    string schema = 2;
    string identifier = 3;
}

// GenericMessage, used for deserializing only
message GenericMessage {
    EventInfo info = 1;
}

// A - Pre-project loading

// A001
message MainReportVersion {
    string version = 1;
    int32 log_version = 2;
}

message MainReportVersionMsg {
    EventInfo info = 1;
    MainReportVersion data = 2;
}

// A002
message MainReportArgs {
    map<string, string> args = 1;
}

message MainReportArgsMsg {
    EventInfo info = 1;
    MainReportArgs data = 2;
}

// A003
message MainTrackingUserState {
    string user_state = 1;
}

message MainTrackingUserStateMsg {
    EventInfo info = 1;
    MainTrackingUserState data = 2;
}

// A004
message MergedFromState {
    int32 num_merged = 1;
    repeated string sample = 2;
}

message MergedFromStateMsg {
    EventInfo info = 1;
    MergedFromState data = 2;
}

// A005
message MissingProfileTarget {
    string profile_name = 1;
    string target_name = 2;
}

message MissingProfileTargetMsg {
    EventInfo info = 1;
    MissingProfileTarget data = 2;
}

// Skipped A006, A007

// A008
message InvalidOptionYAML {
    string option_name = 1;
}

message InvalidOptionYAMLMsg {
    EventInfo info = 1;
    InvalidOptionYAML data = 2;
}

// A009
message LogDbtProjectError {
    string exc = 1;
}

message LogDbtProjectErrorMsg {
    EventInfo info = 1;
    LogDbtProjectError data = 2;
}

// Skipped A010

// A011
message LogDbtProfileError {
    string exc = 1;
    repeated string profiles = 2;
}

message LogDbtProfileErrorMsg {
    EventInfo info = 1;
    LogDbtProfileError data = 2;
}

// Skipped A012, A013, A014, A015, A016

// A017
message StarterProjectPath {
    string dir = 1;
}

message StarterProjectPathMsg {
    EventInfo info = 1;
    StarterProjectPath data = 2;
}

// A018
message ConfigFolderDirectory {
    string dir = 1;
}

message ConfigFolderDirectoryMsg {
    EventInfo info = 1;
    ConfigFolderDirectory data = 2;
}

// A019
message NoSampleProfileFound {
    string adapter = 1;
}

message NoSampleProfileFoundMsg {
    EventInfo info = 1;
    NoSampleProfileFound data = 2;
}

// A020
message ProfileWrittenWithSample {
    string name = 1;
    string path = 2;
}

message ProfileWrittenWithSampleMsg {
    EventInfo info = 1;
    ProfileWrittenWithSample data = 2;
}

// A021
message ProfileWrittenWithTargetTemplateYAML {
    string name = 1;
    string path = 2;
}

message ProfileWrittenWithTargetTemplateYAMLMsg {
    EventInfo info = 1;
    ProfileWrittenWithTargetTemplateYAML data = 2;
}

// A022
message ProfileWrittenWithProjectTemplateYAML {
    string name = 1;
    string path = 2;
}

message ProfileWrittenWithProjectTemplateYAMLMsg {
    EventInfo info = 1;
    ProfileWrittenWithProjectTemplateYAML data = 2;
}

// A023
message SettingUpProfile {
}

message SettingUpProfileMsg {
    EventInfo info = 1;
    SettingUpProfile data = 2;
}

// A024
message InvalidProfileTemplateYAML {
}

message InvalidProfileTemplateYAMLMsg {
    EventInfo info = 1;
    InvalidProfileTemplateYAML data = 2;
}

// A025
message ProjectNameAlreadyExists {
    string name = 1;
}

message ProjectNameAlreadyExistsMsg {
    EventInfo info = 1;
    ProjectNameAlreadyExists data = 2;
}

// A026
message ProjectCreated {
    string project_name = 1;
    string docs_url = 2;
    string slack_url = 3;
}

message ProjectCreatedMsg {
    EventInfo info = 1;
    ProjectCreated data = 2;
}

// D - Deprecation

// D001
message PackageRedirectDeprecation {
    string old_name = 1;
    string new_name = 2;
}

message PackageRedirectDeprecationMsg {
    EventInfo info = 1;
    PackageRedirectDeprecation data = 2;
}

// D002
message PackageInstallPathDeprecation {
}

message PackageInstallPathDeprecationMsg {
    EventInfo info = 1;
    PackageInstallPathDeprecation data = 2;
}

// D003
message ConfigSourcePathDeprecation {
    string deprecated_path = 1;
    string exp_path = 2;
}

message ConfigSourcePathDeprecationMsg {
    EventInfo info = 1;
    ConfigSourcePathDeprecation data = 2;
}

// D004
message ConfigDataPathDeprecation {
    string deprecated_path = 1;
    string exp_path = 2;
}

message ConfigDataPathDeprecationMsg {
    EventInfo info = 1;
    ConfigDataPathDeprecation data = 2;
}

// D005
message AdapterDeprecationWarning {
    string old_name = 1;
    string new_name = 2;
}

message AdapterDeprecationWarningMsg {
    EventInfo info = 1;
    AdapterDeprecationWarning data = 2;
}

// D006
message MetricAttributesRenamed {
    string metric_name = 1;
}

message MetricAttributesRenamedMsg {
    EventInfo info = 1;
    MetricAttributesRenamed data = 2;
}

// D007
message ExposureNameDeprecation {
    string exposure = 1;
}

message ExposureNameDeprecationMsg {
    EventInfo info = 1;
    ExposureNameDeprecation data = 2;
}

// D008
message InternalDeprecation {
    string name = 1;
    string reason = 2;
    string suggested_action = 3;
    string version = 4;
}

message InternalDeprecationMsg {
    EventInfo info = 1;
    InternalDeprecation data = 2;
}

// D009
message EnvironmentVariableRenamed {
    string old_name = 1;
    string new_name = 2;
}

message EnvironmentVariableRenamedMsg {
    EventInfo info = 1;
    EnvironmentVariableRenamed data = 2;
}

// D010
message ConfigLogPathDeprecation {
    string deprecated_path = 1;
}

message ConfigLogPathDeprecationMsg {
    EventInfo info = 1;
    ConfigLogPathDeprecation data = 2;
}

// D011
message ConfigTargetPathDeprecation {
    string deprecated_path = 1;
}

message ConfigTargetPathDeprecationMsg {
    EventInfo info = 1;
    ConfigTargetPathDeprecation data = 2;
}

// E - DB Adapter

// E001
message AdapterEventDebug {
    NodeInfo node_info = 1;
    string name = 2;
    string base_msg = 3;
    google.protobuf.ListValue args = 4;
}

message AdapterEventDebugMsg {
    EventInfo info = 1;
    AdapterEventDebug data = 2;
}

// E002
message AdapterEventInfo {
    NodeInfo node_info = 1;
    string name = 2;
    string base_msg = 3;
    google.protobuf.ListValue args = 4;
}

message AdapterEventInfoMsg {
    EventInfo info = 1;
    AdapterEventInfo data = 2;
}

// E003
message AdapterEventWarning {
    NodeInfo node_info = 1;
    string name = 2;
    string base_msg = 3;
    google.protobuf.ListValue args = 4;
}

message AdapterEventWarningMsg {
    EventInfo info = 1;
    AdapterEventWarning data = 2;
}

// E004
message AdapterEventError {
    NodeInfo node_info = 1;
    string name = 2;
    string base_msg = 3;
    google.protobuf.ListValue args = 4;
    string exc_info = 5;
}

message AdapterEventErrorMsg {
    EventInfo info = 1;
    AdapterEventError data = 2;
}

// E005
message NewConnection {
    NodeInfo node_info = 1;
    string conn_type = 2;
    string conn_name = 3;
}

message NewConnectionMsg {
    EventInfo info = 1;
    NewConnection data = 2;
}

// E006
message ConnectionReused {
    string conn_name = 1;
    string orig_conn_name = 2;
}

message ConnectionReusedMsg {
    EventInfo info = 1;
    ConnectionReused data = 2;
}

// E007
message ConnectionLeftOpenInCleanup {
    string conn_name = 1;
}

message ConnectionLeftOpenInCleanupMsg {
    EventInfo info = 1;
    ConnectionLeftOpenInCleanup data = 2;
}

// E008
message ConnectionClosedInCleanup {
    string conn_name = 1;
}

message ConnectionClosedInCleanupMsg {
    EventInfo info = 1;
    ConnectionClosedInCleanup data = 2;
}

// E009
message RollbackFailed {
    NodeInfo node_info = 1;
    string conn_name = 2;
    string exc_info = 3;
}

message RollbackFailedMsg {
    EventInfo info = 1;
    RollbackFailed data = 2;
}

// E010
message ConnectionClosed {
    NodeInfo node_info = 1;
    string conn_name = 2;
}

message ConnectionClosedMsg {
    EventInfo info = 1;
    ConnectionClosed data = 2;
}

// E011
message ConnectionLeftOpen {
    NodeInfo node_info = 1;
    string conn_name = 2;
}

message ConnectionLeftOpenMsg {
    EventInfo info = 1;
    ConnectionLeftOpen data = 2;
}

// E012
message Rollback {
    NodeInfo node_info = 1;
    string conn_name = 2;
}

message RollbackMsg {
    EventInfo info = 1;
    Rollback data = 2;
}

// E013
message CacheMiss {
    string conn_name = 1;
    string database = 2;
    string schema = 3;
}

message CacheMissMsg {
    EventInfo info = 1;
    CacheMiss data = 2;
}

// E014
message ListRelations {
    string database = 1;
    string schema = 2;
    repeated ReferenceKeyMsg relations = 3;
}

message ListRelationsMsg {
    EventInfo info = 1;
    ListRelations data = 2;
}

// E015
message ConnectionUsed {
    NodeInfo node_info = 1;
    string conn_type = 2;
    string conn_name = 3;
}

message ConnectionUsedMsg {
    EventInfo info = 1;
    ConnectionUsed data = 2;
}

// E016
message SQLQuery {
    NodeInfo node_info = 1;
    string conn_name = 2;
    string sql = 3;
}

message SQLQueryMsg {
    EventInfo info = 1;
    SQLQuery data = 2;
}

// E017
message SQLQueryStatus {
    NodeInfo node_info = 1;
    string status = 2;
    float elapsed = 3;
}

message SQLQueryStatusMsg {
    EventInfo info = 1;
    SQLQueryStatus data = 2;
}

// E018
message SQLCommit {
    NodeInfo node_info = 1;
    string conn_name = 2;
}

message SQLCommitMsg {
    EventInfo info = 1;
    SQLCommit data = 2;
}

// E019
message ColTypeChange {
    string orig_type = 1;
    string new_type = 2;
    ReferenceKeyMsg table = 3;
}

message ColTypeChangeMsg {
    EventInfo info = 1;
    ColTypeChange data = 2;
}

// E020
message SchemaCreation {
    ReferenceKeyMsg relation = 1;
}

message SchemaCreationMsg {
    EventInfo info = 1;
    SchemaCreation data = 2;
}

// E021
message SchemaDrop {
    ReferenceKeyMsg relation = 1;
}

message SchemaDropMsg {
    EventInfo info = 1;
    SchemaDrop data = 2;
}

// E022
message CacheAction {
    string action = 1;
    ReferenceKeyMsg ref_key = 2;
    ReferenceKeyMsg ref_key_2 = 3;
    ReferenceKeyMsg ref_key_3 = 4;
    repeated ReferenceKeyMsg ref_list = 5;
}

message CacheActionMsg {
    EventInfo info = 1;
    CacheAction data = 2;
}

// Skipping E023, E024, E025, E026, E027, E028, E029, E0230

// E031
message CacheDumpGraph {
    map<string, string> dump = 1;
    string before_after = 2;
    string action = 3;
}

message CacheDumpGraphMsg {
    EventInfo info = 1;
    CacheDumpGraph data = 2;
}


// Skipping E032, E033, E034

// E035
message AdapterImportError {
    string exc = 1;
}

message AdapterImportErrorMsg {
    EventInfo info = 1;
    AdapterImportError data = 2;
}

// E036
message PluginLoadError {
    string exc_info = 1;
}

message PluginLoadErrorMsg {
    EventInfo info = 1;
    PluginLoadError data = 2;
}

// E037
message NewConnectionOpening {
    NodeInfo node_info = 1;
    string connection_state = 2;
}

message NewConnectionOpeningMsg {
    EventInfo info = 1;
    NewConnectionOpening data = 2;
}

// E038
message CodeExecution {
    string conn_name = 1;
    string code_content = 2;
}

message CodeExecutionMsg {
    EventInfo info = 1;
    CodeExecution data = 2;
}

// E039
message CodeExecutionStatus {
    string status = 1;
    float elapsed = 2;
}

message CodeExecutionStatusMsg {
    EventInfo info = 1;
    CodeExecutionStatus data = 2;
}

// E040
message CatalogGenerationError {
    string exc = 1;
}

message CatalogGenerationErrorMsg {
    EventInfo info = 1;
    CatalogGenerationError data = 2;
}

// E041
message WriteCatalogFailure {
    int32 num_exceptions = 1;
}

message WriteCatalogFailureMsg {
    EventInfo info = 1;
    WriteCatalogFailure data = 2;
}

// E042
message CatalogWritten {
    string path = 1;
}

message CatalogWrittenMsg {
    EventInfo info = 1;
    CatalogWritten data = 2;
}

// E043
message CannotGenerateDocs {
}

message CannotGenerateDocsMsg {
    EventInfo info = 1;
    CannotGenerateDocs data = 2;
}

// E044
message BuildingCatalog {
}

message BuildingCatalogMsg {
    EventInfo info = 1;
    BuildingCatalog data = 2;
}

// E045
message DatabaseErrorRunningHook {
    string hook_type = 1;
}

message DatabaseErrorRunningHookMsg {
    EventInfo info = 1;
    DatabaseErrorRunningHook data = 2;
}

// E046
message HooksRunning {
    int32 num_hooks = 1;
    string hook_type = 2;
}

message HooksRunningMsg {
    EventInfo info = 1;
    HooksRunning data = 2;
}

// E047
message FinishedRunningStats {
    string stat_line = 1;
    string execution = 2;
    float execution_time = 3;
}

message FinishedRunningStatsMsg {
    EventInfo info = 1;
    FinishedRunningStats data = 2;
}

// I - Project parsing

// I001
message InputFileDiffError {
    string category = 1;
    string file_id = 2;
}

message InputFileDiffErrorMsg {
    EventInfo info = 1;
    InputFileDiffError data = 2;
}

// Skipping I002, I003, I004, I005, I006, I007

// I008
message InvalidValueForField {
    string field_name = 1;
    string field_value = 2;
}

message InvalidValueForFieldMsg {
    EventInfo info = 1;
    InvalidValueForField data = 2;
}

// I009
message ValidationWarning {
    string resource_type = 1;
    string field_name = 2;
    string node_name = 3;
}

message ValidationWarningMsg {
    EventInfo info = 1;
    ValidationWarning data = 2;
}

// I010
message ParsePerfInfoPath {
    string path = 1;
}

message ParsePerfInfoPathMsg {
    EventInfo info = 1;
    ParsePerfInfoPath data = 2;
}

// I011
message GenericTestFileParse {
    string path = 1;
}

message GenericTestFileParseMsg {
    EventInfo info = 1;
    GenericTestFileParse data = 2;
}

// I012
message MacroFileParse {
    string path = 1;
}

message MacroFileParseMsg {
    EventInfo info = 1;
    MacroFileParse data = 2;
}

// Skipping I013

// I014
message PartialParsingErrorProcessingFile {
    string file = 1;
}

message PartialParsingErrorProcessingFileMsg {
    EventInfo info = 1;
    PartialParsingErrorProcessingFile data = 2;
}

// I016
message PartialParsingError {
    map<string, string> exc_info = 1;
}

message PartialParsingErrorMsg {
    EventInfo info = 1;
    PartialParsingError data = 2;
}

// I017
message PartialParsingSkipParsing {
}

message PartialParsingSkipParsingMsg {
    EventInfo info = 1;
    PartialParsingSkipParsing data = 2;
}

// Skipped I018, I019, I020, I021, I022, I023

// I024
message UnableToPartialParse {
    string reason = 1;
}

message UnableToPartialParseMsg {
    EventInfo info = 1;
    UnableToPartialParse data = 2;
}

// I025
message StateCheckVarsHash {
    string checksum = 1;
    string vars = 2;
    string profile = 3;
    string target = 4;
    string version = 5;
}

message StateCheckVarsHashMsg {
    EventInfo info = 1;
    StateCheckVarsHash data = 2;
}

// Skipped I026, I027


// I028
message PartialParsingNotEnabled {
}

message PartialParsingNotEnabledMsg {
    EventInfo info = 1;
    PartialParsingNotEnabled data = 2;
}

// I029
message ParsedFileLoadFailed {
    string path = 1;
    string exc = 2;
    string exc_info = 3;
}

message ParsedFileLoadFailedMsg {
    EventInfo info = 1;
    ParsedFileLoadFailed data = 2;
}

// Skipping I030 - I039

// I040
message PartialParsingEnabled {
    int32 deleted = 1;
    int32 added = 2;
    int32 changed = 3;
}

message PartialParsingEnabledMsg {
    EventInfo info = 1;
    PartialParsingEnabled data = 2;
}

// I041
message PartialParsingFile {
    string file_id = 1;
    string operation = 2;
}

message PartialParsingFileMsg {
    EventInfo info = 1;
    PartialParsingFile data = 2;
}

// Skipped I042, I043, I044, I045, I046, I047, I048, I049

// I050
message InvalidDisabledTargetInTestNode {
    string resource_type_title = 1;
    string unique_id = 2;
    string original_file_path = 3;
    string target_kind = 4;
    string target_name = 5;
    string target_package = 6;
}

message InvalidDisabledTargetInTestNodeMsg {
    EventInfo info = 1;
    InvalidDisabledTargetInTestNode data = 2;
}

// I051
message UnusedResourceConfigPath {
    repeated string unused_config_paths = 1;
}

message UnusedResourceConfigPathMsg {
    EventInfo info = 1;
    UnusedResourceConfigPath data = 2;
}

// I052
message SeedIncreased {
    string package_name = 1;
    string name = 2;
}

message SeedIncreasedMsg {
    EventInfo info = 1;
    SeedIncreased data = 2;
}

// I053
message SeedExceedsLimitSamePath {
    string package_name = 1;
    string name = 2;
}

message SeedExceedsLimitSamePathMsg {
    EventInfo info = 1;
    SeedExceedsLimitSamePath data = 2;
}

// I054
message SeedExceedsLimitAndPathChanged {
    string package_name = 1;
    string name = 2;
}

message SeedExceedsLimitAndPathChangedMsg {
    EventInfo info = 1;
    SeedExceedsLimitAndPathChanged data = 2;
}

// I055
message SeedExceedsLimitChecksumChanged {
    string package_name = 1;
    string name = 2;
    string checksum_name = 3;
}

message SeedExceedsLimitChecksumChangedMsg {
    EventInfo info = 1;
    SeedExceedsLimitChecksumChanged data = 2;
}

// I056
message UnusedTables {
    repeated string unused_tables = 1;
}

message UnusedTablesMsg {
    EventInfo info = 1;
    UnusedTables data = 2;
}

// I057
message WrongResourceSchemaFile {
    string patch_name = 1;
    string resource_type = 2;
    string plural_resource_type = 3;
    string yaml_key = 4;
    string file_path = 5;
}

message WrongResourceSchemaFileMsg {
    EventInfo info = 1;
    WrongResourceSchemaFile data = 2;
}

// I058
message NoNodeForYamlKey {
    string patch_name = 1;
    string yaml_key = 2;
    string file_path = 3;
}

message NoNodeForYamlKeyMsg {
    EventInfo info = 1;
    NoNodeForYamlKey data = 2;
}

// I059
message MacroNotFoundForPatch {
    string patch_name = 1;
}

message MacroNotFoundForPatchMsg {
    EventInfo info = 1;
    MacroNotFoundForPatch data = 2;
}

// I060
message NodeNotFoundOrDisabled {
    string original_file_path = 1;
    string unique_id = 2;
    string resource_type_title = 3;
    string target_name = 4;
    string target_kind = 5;
    string target_package = 6;
    string disabled = 7;
}

message NodeNotFoundOrDisabledMsg {
    EventInfo info = 1;
    NodeNotFoundOrDisabled data = 2;
}

// I061
message JinjaLogWarning {
    NodeInfo node_info = 1;
    string msg = 2;
}

message JinjaLogWarningMsg {
    EventInfo info = 1;
    JinjaLogWarning data = 2;
}

// I062
message JinjaLogInfo {
    NodeInfo node_info = 1;
    string msg = 2;
}

message  JinjaLogInfoMsg {
    EventInfo info = 1;
     JinjaLogInfo data = 2;
}

// I063
message JinjaLogDebug {
    NodeInfo node_info = 1;
    string msg = 2;
}

message JinjaLogDebugMsg {
    EventInfo info = 1;
    JinjaLogDebug data = 2;
}

// M - Deps generation

// M001
message GitSparseCheckoutSubdirectory {
    string subdir = 1;
}

message GitSparseCheckoutSubdirectoryMsg {
    EventInfo info = 1;
    GitSparseCheckoutSubdirectory data = 2;
}

// M002
message GitProgressCheckoutRevision {
    string revision = 1;
}

message GitProgressCheckoutRevisionMsg {
    EventInfo info = 1;
    GitProgressCheckoutRevision data = 2;
}

// M003
message GitProgressUpdatingExistingDependency {
    string dir = 1;
}

message GitProgressUpdatingExistingDependencyMsg {
    EventInfo info = 1;
    GitProgressUpdatingExistingDependency data = 2;
}

// M004
message GitProgressPullingNewDependency {
    string dir = 1;
}

message GitProgressPullingNewDependencyMsg {
    EventInfo info = 1;
    GitProgressPullingNewDependency data = 2;
}

// M005
message GitNothingToDo {
    string sha = 1;
}

message GitNothingToDoMsg {
    EventInfo info = 1;
    GitNothingToDo data = 2;
}

// M006
message GitProgressUpdatedCheckoutRange {
    string start_sha = 1;
    string end_sha = 2;
}

message GitProgressUpdatedCheckoutRangeMsg {
    EventInfo info = 1;
    GitProgressUpdatedCheckoutRange data = 2;
}

// M007
message GitProgressCheckedOutAt {
    string end_sha = 1;
}

message GitProgressCheckedOutAtMsg {
    EventInfo info = 1;
    GitProgressCheckedOutAt data = 2;
}

// M008
message RegistryProgressGETRequest {
    string url = 1;
}

message RegistryProgressGETRequestMsg {
    EventInfo info = 1;
    RegistryProgressGETRequest data = 2;
}

// M009
message RegistryProgressGETResponse {
    string url = 1;
    int32 resp_code = 2;
}

message RegistryProgressGETResponseMsg {
    EventInfo info = 1;
    RegistryProgressGETResponse data = 2;
}

// M010
message SelectorReportInvalidSelector {
    string valid_selectors = 1;
    string spec_method = 2;
    string raw_spec = 3;
}

message SelectorReportInvalidSelectorMsg {
    EventInfo info = 1;
    SelectorReportInvalidSelector data = 2;
}

// Skipped M011 and M012

// M013
message DepsNoPackagesFound {
}

message DepsNoPackagesFoundMsg {
    EventInfo info = 1;
    DepsNoPackagesFound data = 2;
}

// M014
message DepsStartPackageInstall {
    string package_name = 1;
}

message DepsStartPackageInstallMsg {
    EventInfo info = 1;
    DepsStartPackageInstall data = 2;
}

// M015
message DepsInstallInfo {
    string version_name = 1;
}

message DepsInstallInfoMsg {
    EventInfo info = 1;
    DepsInstallInfo data = 2;
}

// M016
message DepsUpdateAvailable {
    string version_latest = 1;
}

message DepsUpdateAvailableMsg {
    EventInfo info = 1;
    DepsUpdateAvailable data = 2;
}

// M017
message DepsUpToDate {
}

message DepsUpToDateMsg {
    EventInfo info = 1;
    DepsUpToDate data = 2;
}

// M018
message DepsListSubdirectory {
    string subdirectory = 1;
}

message DepsListSubdirectoryMsg {
    EventInfo info = 1;
    DepsListSubdirectory data = 2;
}

// M019
message DepsNotifyUpdatesAvailable {
    repeated string packages = 1;
}

message DepsNotifyUpdatesAvailableMsg {
    EventInfo info = 1;
    DepsNotifyUpdatesAvailable data = 2;
}

// M020
message RetryExternalCall {
    int32 attempt = 1;
    int32 max = 2;
}

message RetryExternalCallMsg {
    EventInfo info = 1;
    RetryExternalCall data = 2;
}

// M021
message RecordRetryException {
    string exc = 1;
}

message RecordRetryExceptionMsg {
    EventInfo info = 1;
    RecordRetryException data = 2;
}

// M022
message RegistryIndexProgressGETRequest {
    string url = 1;
}

message RegistryIndexProgressGETRequestMsg {
    EventInfo info = 1;
    RegistryIndexProgressGETRequest data = 2;
}

// M023
message RegistryIndexProgressGETResponse {
    string url = 1;
    int32 resp_code = 2;
}

message RegistryIndexProgressGETResponseMsg {
    EventInfo info = 1;
    RegistryIndexProgressGETResponse data = 2;
}

// M024
message RegistryResponseUnexpectedType {
    string response = 1;
}

message RegistryResponseUnexpectedTypeMsg {
    EventInfo info = 1;
    RegistryResponseUnexpectedType data = 2;
}

// M025
message RegistryResponseMissingTopKeys {
    string response = 1;
}

message RegistryResponseMissingTopKeysMsg {
    EventInfo info = 1;
    RegistryResponseMissingTopKeys data = 2;
}

// M026
message RegistryResponseMissingNestedKeys {
    string response = 1;
}

message RegistryResponseMissingNestedKeysMsg {
    EventInfo info = 1;
    RegistryResponseMissingNestedKeys data = 2;
}

// m027
message RegistryResponseExtraNestedKeys {
    string response = 1;
}

message RegistryResponseExtraNestedKeysMsg {
    EventInfo info = 1;
    RegistryResponseExtraNestedKeys data = 2;
}

// M028
message DepsSetDownloadDirectory {
    string path = 1;
}

message DepsSetDownloadDirectoryMsg {
    EventInfo info = 1;
    DepsSetDownloadDirectory data = 2;
}

// M029
message DepsUnpinned {
    string revision = 1;
    string git = 2;
}

message DepsUnpinnedMsg {
    EventInfo info = 1;
    DepsUnpinned data = 2;
}

// M030
message NoNodesForSelectionCriteria {
    string spec_raw = 1;
}

message NoNodesForSelectionCriteriaMsg {
    EventInfo info = 1;
    NoNodesForSelectionCriteria data = 2;
}

// Q - Node execution

// Q001
message RunningOperationCaughtError {
    string exc = 1;
}

message RunningOperationCaughtErrorMsg {
    EventInfo info = 1;
    RunningOperationCaughtError data = 2;
}

// Q002
message CompileComplete {
}

message CompileCompleteMsg {
    EventInfo info = 1;
    CompileComplete data = 2;
}

// Q003
message FreshnessCheckComplete {
}

message FreshnessCheckCompleteMsg {
    EventInfo info = 1;
    FreshnessCheckComplete data = 2;
}

// Q004
message SeedHeader {
    string header = 1;
}

message SeedHeaderMsg {
    EventInfo info = 1;
    SeedHeader data = 2;
}

// Skipped Q005

// Q006
message SQLRunnerException {
    string exc = 1;
    string exc_info = 2;
}

message SQLRunnerExceptionMsg {
    EventInfo info = 1;
    SQLRunnerException data = 2;
}

// Q007
message LogTestResult {
    NodeInfo node_info = 1;
    string name = 2;
    string status = 3;
    int32 index = 4;
    int32 num_models = 5;
    float execution_time = 6;
    int32 num_failures = 7;
}

message LogTestResultMsg {
    EventInfo info = 1;
    LogTestResult data = 2;
}


// Skipped Q008, Q009, Q010


// Q011
message LogStartLine {
    NodeInfo node_info = 1;
    string description = 2;
    int32 index = 3;
    int32 total = 4;
}

message LogStartLineMsg {
    EventInfo info = 1;
    LogStartLine data = 2;
}

// Q012
message LogModelResult {
    NodeInfo node_info = 1;
    string description = 2;
    string status = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
}

message LogModelResultMsg {
    EventInfo info = 1;
    LogModelResult data = 2;
}

// skipped Q013, Q014

// Q015
message LogSnapshotResult {
    NodeInfo node_info = 1;
    string description = 2;
    string status = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
    map<string, string> cfg = 7;
}

message LogSnapshotResultMsg {
    EventInfo info = 1;
    LogSnapshotResult data = 2;
}

// Q016
message LogSeedResult {
    NodeInfo node_info = 1;
    string status = 2;
    string result_message = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
    string schema = 7;
    string relation = 8;
}

message LogSeedResultMsg {
    EventInfo info = 1;
    LogSeedResult data = 2;
}

// Skipped Q017

// Q018
message LogFreshnessResult {
    string status = 1;
    NodeInfo node_info = 2;
    int32 index = 3;
    int32 total = 4;
    float execution_time = 5;
    string source_name = 6;
    string table_name = 7;
}

message LogFreshnessResultMsg {
    EventInfo info = 1;
    LogFreshnessResult data = 2;
}


// Skipped Q019, Q020, Q021


// Q022
message LogCancelLine {
    string conn_name = 1;
}

message LogCancelLineMsg {
    EventInfo info = 1;
    LogCancelLine data = 2;
}

// Q023
message DefaultSelector {
    string name = 1;
}

message DefaultSelectorMsg {
    EventInfo info = 1;
    DefaultSelector data = 2;
}

// Q024
message NodeStart {
    NodeInfo node_info = 1;
}

message NodeStartMsg {
    EventInfo info = 1;
    NodeStart data = 2;
}

// Q025
message NodeFinished {
    NodeInfo node_info = 1;
    RunResultMsg run_result = 2;
}

message NodeFinishedMsg {
    EventInfo info = 1;
    NodeFinished data = 2;
}

// Q026
message QueryCancelationUnsupported {
    string type = 1;
}

message QueryCancelationUnsupportedMsg {
    EventInfo info = 1;
    QueryCancelationUnsupported data = 2;
}

// Q027
message ConcurrencyLine {
    int32 num_threads = 1;
    string target_name = 2;
    int32 node_count = 3;
}

message ConcurrencyLineMsg {
    EventInfo info = 1;
    ConcurrencyLine data = 2;
}

// Q029
message WritingInjectedSQLForNode {
    NodeInfo node_info = 1;
}

message WritingInjectedSQLForNodeMsg {
    EventInfo info = 1;
    WritingInjectedSQLForNode data = 2;
}

// Q030
message NodeCompiling {
    NodeInfo node_info = 1;
}

message NodeCompilingMsg {
    EventInfo info = 1;
    NodeCompiling data = 2;
}

// Q031
message NodeExecuting {
    NodeInfo node_info = 1;
}

message NodeExecutingMsg {
    EventInfo info = 1;
    NodeExecuting data = 2;
}

// Q032
message LogHookStartLine {
    NodeInfo node_info = 1;
    string statement = 2;
    int32 index = 3;
    int32 total = 4;
}

message LogHookStartLineMsg {
    EventInfo info = 1;
    LogHookStartLine data = 2;
}

// Q033
message LogHookEndLine {
    NodeInfo node_info = 1;
    string statement = 2;
    string status = 3;
    int32 index = 4;
    int32 total = 5;
    float execution_time = 6;
}

message LogHookEndLineMsg {
    EventInfo info = 1;
    LogHookEndLine data = 2;
}

// Q034
message SkippingDetails {
    NodeInfo node_info = 1;
    string resource_type = 2;
    string schema = 3;
    string node_name = 4;
    int32 index = 5;
    int32 total = 6;
}

message SkippingDetailsMsg {
    EventInfo info = 1;
    SkippingDetails data = 2;
}

// Q035
message NothingToDo {
}

message NothingToDoMsg {
    EventInfo info = 1;
    NothingToDo data = 2;
}

// Q036
message RunningOperationUncaughtError {
    string exc = 1;
}

message RunningOperationUncaughtErrorMsg {
    EventInfo info = 1;
    RunningOperationUncaughtError data = 2;
}

// Q037
message EndRunResult {
    repeated RunResultMsg results = 1;
    float elapsed_time = 2;
    google.protobuf.Timestamp generated_at = 3;
    bool success = 4;
}

message EndRunResultMsg {
    EventInfo info = 1;
    EndRunResult data = 2;
}

// Q038
message NoNodesSelected {
}

message NoNodesSelectedMsg {
    EventInfo info = 1;
    NoNodesSelected data = 2;
}

// Q039
message CommandCompleted {
    string command = 1;
    bool success = 2;
    google.protobuf.Timestamp completed_at = 3;
    float elapsed = 4;
}

message CommandCompletedMsg {
    EventInfo info = 1;
    CommandCompleted data = 2;
}

// Q041
message ShowNode {
    string node_name = 1;
    string preview = 2;
    bool is_inline = 3;
    string output_format = 4;
}

message ShowNodeMsg {
    EventInfo info = 1;
    ShowNode data = 2;
}

// Q042
message CompiledNode {
    string node_name = 1;
    string compiled = 2;
    bool is_inline = 3;
    string output_format = 4;
}

message CompiledNodeMsg {
    EventInfo info = 1;
    CompiledNode data = 2;
}

// W - Node testing

// Skipped W001

// W002
message CatchableExceptionOnRun {
    NodeInfo node_info = 1;
    string exc = 2;
    string exc_info = 3;
}

message CatchableExceptionOnRunMsg {
    EventInfo info = 1;
    CatchableExceptionOnRun data = 2;
}

// W003
message InternalErrorOnRun {
    string build_path = 1;
    string exc = 2;
}

message InternalErrorOnRunMsg {
    EventInfo info = 1;
    InternalErrorOnRun data = 2;
}

// W004
message GenericExceptionOnRun {
    string build_path = 1;
    string unique_id = 2;
    string exc = 3;
}

message GenericExceptionOnRunMsg {
    EventInfo info = 1;
    GenericExceptionOnRun data = 2;
}

// W005
message NodeConnectionReleaseError {
    string node_name = 1;
    string exc = 2;
    string exc_info = 3;
}

message NodeConnectionReleaseErrorMsg {
    EventInfo info = 1;
    NodeConnectionReleaseError data = 2;
}

// W006
message FoundStats {
    string stat_line = 1;
}

message FoundStatsMsg {
    EventInfo info = 1;
    FoundStats data = 2;
}

// Z - Misc

// Z001
message MainKeyboardInterrupt {
}

message MainKeyboardInterruptMsg {
    EventInfo info = 1;
    MainKeyboardInterrupt data = 2;
}

// Z002
message MainEncounteredError {
    string exc = 1;
}

message MainEncounteredErrorMsg {
    EventInfo info = 1;
    MainEncounteredError data = 2;
}

// Z003
message MainStackTrace {
    string stack_trace = 1;
}

message MainStackTraceMsg {
    EventInfo info = 1;
    MainStackTrace data = 2;
}

// skipping Z004

// Z005
message SystemCouldNotWrite {
    string path = 1;
    string reason = 2;
    string exc = 3;
}

message SystemCouldNotWriteMsg {
    EventInfo info = 1;
    SystemCouldNotWrite data = 2;
}

// Z006
message SystemExecutingCmd {
    repeated string cmd = 1;
}

message SystemExecutingCmdMsg {
    EventInfo info = 1;
    SystemExecutingCmd data = 2;
}

// Z007
message SystemStdOut{
    string bmsg = 1;
}

message SystemStdOutMsg {
    EventInfo info = 1;
    SystemStdOut data = 2;
}

// Z008
message SystemStdErr {
    string bmsg = 1;
}

message SystemStdErrMsg {
    EventInfo info = 1;
    SystemStdErr data = 2;
}

// Z009
message SystemReportReturnCode {
    int32 returncode = 1;
}

message SystemReportReturnCodeMsg {
    EventInfo info = 1;
    SystemReportReturnCode data = 2;
}

// Z010
message TimingInfoCollected {
    NodeInfo node_info = 1;
    TimingInfoMsg timing_info = 2;
}

message TimingInfoCollectedMsg {
    EventInfo info = 1;
    TimingInfoCollected data = 2;
}

// Z011
message LogDebugStackTrace {
    string exc_info = 1;
}

message LogDebugStackTraceMsg {
    EventInfo info = 1;
    LogDebugStackTrace data = 2;
}

// Z012
message CheckCleanPath {
    string path = 1;
}

message CheckCleanPathMsg {
    EventInfo info = 1;
    CheckCleanPath data = 2;
}

// Z013
message ConfirmCleanPath {
    string path = 1;
}

message ConfirmCleanPathMsg {
    EventInfo info = 1;
    ConfirmCleanPath data = 2;
}

// Z014
message ProtectedCleanPath {
    string path = 1;
}

message ProtectedCleanPathMsg {
    EventInfo info = 1;
    ProtectedCleanPath data = 2;
}

// Z015
message FinishedCleanPaths {
}

message FinishedCleanPathsMsg {
    EventInfo info = 1;
    FinishedCleanPaths data = 2;
}

// Z016
message OpenCommand {
    string open_cmd = 1;
    string profiles_dir = 2;
}

message OpenCommandMsg {
    EventInfo info = 1;
    OpenCommand data = 2;
}

// Z017
message Formatting {
    string msg = 1;
}

message FormattingMsg {
    EventInfo info = 1;
    Formatting data = 2;
}

// Z018
message ServingDocsPort {
    string address = 1;
    int32 port = 2;
}

message ServingDocsPortMsg {
    EventInfo info = 1;
    ServingDocsPort data = 2;
}

// Z019
message ServingDocsAccessInfo {
    string port = 1;
}

message ServingDocsAccessInfoMsg {
    EventInfo info = 1;
    ServingDocsAccessInfo data = 2;
}

// Z020
message ServingDocsExitInfo {
}

message ServingDocsExitInfoMsg {
    EventInfo info = 1;
    ServingDocsExitInfo data = 2;
}

// Z021
message RunResultWarning {
    string resource_type = 1;
    string node_name = 2;
    string path = 3;
}

message RunResultWarningMsg {
    EventInfo info = 1;
    RunResultWarning data = 2;
}

// Z022
message RunResultFailure {
    string resource_type = 1;
    string node_name = 2;
    string path = 3;
}

message RunResultFailureMsg {
    EventInfo info = 1;
    RunResultFailure data = 2;
}

// Z023
message StatsLine {
    map<string, int32> stats = 1;
}

message StatsLineMsg {
    EventInfo info = 1;
    StatsLine data = 2;
}

// Z024
message RunResultError {
    string msg = 1;
}

message RunResultErrorMsg {
    EventInfo info = 1;
    RunResultError data = 2;
}

// Z025
message RunResultErrorNoMessage {
    string status = 1;
}

message RunResultErrorNoMessageMsg {
    EventInfo info = 1;
    RunResultErrorNoMessage data = 2;
}

// Z026
message SQLCompiledPath {
    string path = 1;
}

message SQLCompiledPathMsg {
    EventInfo info = 1;
    SQLCompiledPath data = 2;
}

// Z027
message CheckNodeTestFailure {
    string relation_name = 1;
}

message CheckNodeTestFailureMsg {
    EventInfo info = 1;
    CheckNodeTestFailure data = 2;
}

// Z028
message FirstRunResultError {
    string msg = 1;
}

message FirstRunResultErrorMsg {
    EventInfo info = 1;
    FirstRunResultError data = 2;
}

// Z029
message AfterFirstRunResultError {
    string msg = 1;
}

message AfterFirstRunResultErrorMsg {
    EventInfo info = 1;
    AfterFirstRunResultError data = 2;
}

// Z030
message EndOfRunSummary {
    int32 num_errors = 1;
    int32 num_warnings = 2;
    bool keyboard_interrupt = 3;
}

message EndOfRunSummaryMsg {
    EventInfo info = 1;
    EndOfRunSummary data = 2;
}

// Skipped Z031, Z032, Z033

// Z034
message LogSkipBecauseError {
    string schema = 1;
    string relation = 2;
    int32 index = 3;
    int32 total = 4;
}

message LogSkipBecauseErrorMsg {
    EventInfo info = 1;
    LogSkipBecauseError data = 2;
}

// Z036
message EnsureGitInstalled {
}

message EnsureGitInstalledMsg {
    EventInfo info = 1;
    EnsureGitInstalled data = 2;
}

// Z037
message DepsCreatingLocalSymlink {
}

message DepsCreatingLocalSymlinkMsg {
    EventInfo info = 1;
    DepsCreatingLocalSymlink data = 2;
}

// Z038
message DepsSymlinkNotAvailable {
}

message DepsSymlinkNotAvailableMsg {
    EventInfo info = 1;
    DepsSymlinkNotAvailable data = 2;
}

// Z039
message DisableTracking {
}

message DisableTrackingMsg {
    EventInfo info = 1;
    DisableTracking data = 2;
}

// Z040
message SendingEvent {
    string kwargs = 1;
}

message SendingEventMsg {
    EventInfo info = 1;
    SendingEvent data = 2;
}

// Z041
message SendEventFailure {
}

message SendEventFailureMsg {
    EventInfo info = 1;
    SendEventFailure data = 2;
}

// Z042
message FlushEvents {
}

message FlushEventsMsg {
    EventInfo info = 1;
    FlushEvents data = 2;
}

// Z043
message FlushEventsFailure {
}

message FlushEventsFailureMsg {
    EventInfo info = 1;
    FlushEventsFailure data = 2;
}

// Z044
message TrackingInitializeFailure {
    string exc_info = 1;
}

message TrackingInitializeFailureMsg {
    EventInfo info = 1;
    TrackingInitializeFailure data = 2;
}

// Skipped Z045

// Z046
message RunResultWarningMessage {
    string msg = 1;
}

message RunResultWarningMessageMsg {
    EventInfo info = 1;
    RunResultWarningMessage data = 2;
}

// Z047
message DebugCmdOut {
    string msg = 1;
}

message DebugCmdOutMsg {
    EventInfo info = 1;
    DebugCmdOut data = 2;
}

// Z048
message DebugCmdResult {
    string msg = 1;
}

message DebugCmdResultMsg {
    EventInfo info = 1;
    DebugCmdResult data = 2;
}

// Z049
message ListCmdOut {
    string msg = 1;
}

message ListCmdOutMsg {
    EventInfo info = 1;
    ListCmdOut data = 2;
}

// Z050
message Note {
    string msg = 1;
}

message NoteMsg {
    EventInfo info = 1;
    Note data = 2;
}
